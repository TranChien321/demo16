<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/codegym/demo16/configs/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/codegym/demo16/configs/SecurityConfig.java" />
              <option name="originalContent" value="package com.codegym.demo16.configs;&#10;&#10;import com.codegym.demo16.services.CustomUserDetailsService;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.ComponentScan;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationProvider;&#10;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;@ComponentScan(basePackages = &quot;com.codegym.demo16&quot;)&#10;public class SecurityConfig {&#10;&#10;    private final CustomUserDetailsService userDetailsService;&#10;&#10;    public SecurityConfig(CustomUserDetailsService userDetailsService) {&#10;        this.userDetailsService = userDetailsService;&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {&#10;        http&#10;                .authorizeHttpRequests(authorize -&gt; authorize&#10;                        .requestMatchers(&quot;/resources/**&quot;, &quot;/auth/login&quot;).permitAll()&#10;                        .requestMatchers(&quot;/admin/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;USER&quot;)&#10;                        .anyRequest().authenticated()&#10;                )&#10;                .formLogin(form -&gt; form&#10;                        .loginPage(&quot;/auth/login&quot;)&#10;                        .loginProcessingUrl(&quot;/auth/login&quot;)&#10;                        .usernameParameter(&quot;email&quot;)             // nếu bạn dùng email thay vì username&#10;                        .passwordParameter(&quot;password&quot;)&#10;                        .defaultSuccessUrl(&quot;/admin/users&quot;, true)&#10;                        .failureUrl(&quot;/auth/login?error&quot;)   // khi sai tài khoản/mật khẩu&#10;                        .permitAll())&#10;                .logout(logout -&gt; logout.permitAll());&#10;&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationProvider authenticationProvider() {&#10;        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();&#10;        provider.setUserDetailsService(userDetailsService);&#10;        provider.setPasswordEncoder(passwordEncoder());&#10;        return provider;&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.codegym.demo16.configs;&#10;&#10;import com.codegym.demo16.services.CustomUserDetailsService;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.ComponentScan;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationProvider;&#10;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;@ComponentScan(basePackages = &quot;com.codegym.demo16&quot;)&#10;public class SecurityConfig {&#10;&#10;    private final CustomUserDetailsService userDetailsService;&#10;&#10;    public SecurityConfig(CustomUserDetailsService userDetailsService) {&#10;        this.userDetailsService = userDetailsService;&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {&#10;        http&#10;                .authorizeHttpRequests(authorize -&gt; authorize&#10;                        .requestMatchers(&quot;/resources/**&quot;, &quot;/auth/login&quot;).permitAll()&#10;                        .requestMatchers(&quot;/admin/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;USER&quot;)&#10;                        .anyRequest().authenticated()&#10;                )&#10;                .formLogin(form -&gt; form&#10;                        .loginPage(&quot;/auth/login&quot;)&#10;                        .loginProcessingUrl(&quot;/auth/login&quot;)&#10;                        .usernameParameter(&quot;email&quot;)             // nếu bạn dùng email thay vì username&#10;                        .passwordParameter(&quot;password&quot;)&#10;                        .defaultSuccessUrl(&quot;/admin/users&quot;, true)&#10;                        .failureUrl(&quot;/auth/login?error&quot;)   // khi sai tài khoản/mật khẩu&#10;                        .permitAll())&#10;                .logout(logout -&gt; logout.permitAll());&#10;&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationProvider authenticationProvider() {&#10;        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();&#10;        provider.setUserDetailsService(userDetailsService);&#10;        provider.setPasswordEncoder(passwordEncoder());&#10;        return provider;&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/codegym/demo16/controllers/UserController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/codegym/demo16/controllers/UserController.java" />
              <option name="originalContent" value="package com.codegym.demo16.controllers;&#10;&#10;import com.codegym.demo16.dto.CreateUserDTO;&#10;import com.codegym.demo16.dto.DepartmentDTO;&#10;import com.codegym.demo16.dto.EditUserDTO;&#10;import com.codegym.demo16.dto.UserDTO;&#10;import com.codegym.demo16.dto.RoleDTO;&#10;import com.codegym.demo16.dto.response.ListDepartmentResponse;&#10;import com.codegym.demo16.dto.response.ListUserResponse;&#10;import com.codegym.demo16.services.DepartmentService;&#10;import com.codegym.demo16.services.RoleService;&#10;import com.codegym.demo16.services.UserService;&#10;import jakarta.servlet.http.Cookie;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.ui.Model;&#10;import org.springframework.validation.BindingResult;&#10;import org.springframework.validation.annotation.Validated;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;&#10;import java.io.IOException;&#10;import java.util.List;&#10;&#10;@Controller&#10;@RequestMapping(&quot;/admin/users&quot;)&#10;public class UserController {&#10;    private final UserService userService;&#10;    private final DepartmentService departmentService;&#10;    private final RoleService roleService;&#10;    private final HttpSession httpSession;&#10;&#10;&#10;    public UserController(UserService userService, DepartmentService departmentService, RoleService roleService, HttpSession httpSession) {&#10;        this.userService = userService;&#10;        this.departmentService = departmentService;&#10;        this.roleService = roleService;&#10;        this.httpSession = httpSession;&#10;&#10;    }&#10;&#10;&#10;    @GetMapping&#10;    public String listUsers(@CookieValue(value = &quot;counter&quot;, defaultValue = &quot;1&quot;) String counter,&#10;                            @RequestParam(value = &quot;page&quot;, required = false, defaultValue = &quot;1&quot;) int page,&#10;                            @RequestParam(value = &quot;size&quot;, required = false, defaultValue = &quot;5&quot;) int size,&#10;                            @RequestParam(value = &quot;departmentId&quot;, required = false) Long departmentId,&#10;                            Model model,&#10;                            HttpServletResponse response) {&#10;        if (page &lt; 1) {&#10;            page = 1;&#10;        } else {&#10;            page -= 1;&#10;        }&#10;&#10;        Cookie myCookie = new Cookie(&quot;msg&quot;, &quot;Hello&quot;);&#10;        int total = Integer.parseInt(counter) + 1;&#10;        Cookie counterViewPage = new Cookie(&quot;counter&quot;, total + &quot;&quot;);&#10;        myCookie.setMaxAge(60);&#10;        counterViewPage.setMaxAge(60);&#10;        response.addCookie(myCookie);&#10;        response.addCookie(counterViewPage);&#10;&#10;        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();&#10;        String email = authentication.getName();&#10;        httpSession.setAttribute(&quot;email&quot;, email);&#10;&#10;        List&lt;UserDTO&gt; users;&#10;        int totalPages;&#10;&#10;        if (departmentId != null) {&#10;            users = userService.filterUsersByDepartment(departmentId, page, size);&#10;            totalPages = 1; // nếu lọc thì không cần nhiều trang, hoặc bạn tự tính lại&#10;        } else {&#10;            ListUserResponse listUserResponse = userService.getAllUsers(page, size);&#10;            users = listUserResponse.getUsers();&#10;            totalPages = listUserResponse.getTotalPage();&#10;        }&#10;&#10;        model.addAttribute(&quot;users&quot;, users);&#10;        model.addAttribute(&quot;totalPages&quot;, totalPages);&#10;        model.addAttribute(&quot;totalViewPage&quot;, counter);&#10;&#10;        // Gửi list department xuống để vẽ dropdown lọc&#10;        model.addAttribute(&quot;departments&quot;, departmentService.getAllDepartments());&#10;        model.addAttribute(&quot;selectedDepartmentId&quot;, departmentId);&#10;&#10;        return &quot;users/list&quot;;&#10;    }&#10;&#10;&#10;&#10;    @GetMapping(&quot;/create&quot;)&#10;    public String createUser(Model model) {&#10;        CreateUserDTO createUserDTO = new CreateUserDTO();&#10;        List&lt;DepartmentDTO&gt; departments = departmentService.getAllDepartments();&#10;        List&lt;RoleDTO&gt; roles = roleService.getAllRoles(); // ✅ sửa thành RoleDTO&#10;&#10;        model.addAttribute(&quot;departments&quot;, departments);&#10;        model.addAttribute(&quot;roles&quot;, roles); // ✅ dùng &quot;roles&quot; giống edit&#10;        model.addAttribute(&quot;user&quot;, createUserDTO);&#10;&#10;        return &quot;users/create&quot;;&#10;    }&#10;&#10;&#10;    @GetMapping(&quot;/{id}/detail&quot;)&#10;    public String userDetail(@PathVariable(&quot;id&quot;) String id,&#10;                             Model model) {&#10;        model.addAttribute(&quot;id&quot;, id);&#10;        return &quot;users/detail&quot;; // This will resolve to /WEB-INF/views/users/detail.html&#10;    }&#10;&#10;&#10;    @GetMapping(&quot;/{id}/delete&quot;)&#10;    public String deleteUser(@PathVariable(&quot;id&quot;) int id) {&#10;        UserDTO user = userService.getUserById(id);&#10;        if (user == null) {&#10;            return &quot;errors/404&quot;;&#10;        }&#10;        userService.deleteUser(id);&#10;        return &quot;redirect:/admin/users&quot;;&#10;    }&#10;    @ExceptionHandler(RuntimeException.class)&#10;    public String handlerRuntimeException(){&#10;        return &quot;errors/500&quot;;&#10;    }&#10;//&#10;&#10;    @PostMapping(&quot;/create&quot;)&#10;    public String storeUser(@Validated @ModelAttribute(&quot;user&quot;) CreateUserDTO createUserDTO,&#10;                            BindingResult result,&#10;                            Model model) throws IOException {&#10;        if (result.hasErrors()) {&#10;            // Khi có lỗi, phải load lại cả departments + roles để render lại form&#10;            List&lt;DepartmentDTO&gt; departments = departmentService.getAllDepartments();&#10;            List&lt;RoleDTO&gt; roles = roleService.getAllRoles();&#10;            model.addAttribute(&quot;departments&quot;, departments);&#10;            model.addAttribute(&quot;roles&quot;, roles);&#10;            return &quot;users/create&quot;;&#10;        }&#10;&#10;        // Nếu không có lỗi thì lưu user&#10;        userService.storeUser(createUserDTO);&#10;        return &quot;redirect:/admin/users&quot;;&#10;    }&#10;&#10;&#10;    @GetMapping(&quot;/{id}/edit&quot;)&#10;    public String showFormEdit(@PathVariable(&quot;id&quot;) int id, Model model) {&#10;        UserDTO user = userService.getUserById(id);&#10;        if (user == null) {&#10;            return &quot;errors/404&quot;;&#10;        }&#10;&#10;        EditUserDTO editUserDTO = new EditUserDTO(&#10;                Math.toIntExact(user.getId()),&#10;                user.getUsername(),&#10;                user.getEmail(),&#10;                user.getPhone()&#10;        );&#10;        editUserDTO.setDepartmentId(user.getDepartmentId());&#10;        editUserDTO.setRoleId(user.getRoleId()); //  Sửa ở đây&#10;&#10;        List&lt;DepartmentDTO&gt; departments = departmentService.getAllDepartments();&#10;        List&lt;RoleDTO&gt; roles = roleService.getAllRoles();&#10;&#10;        model.addAttribute(&quot;user&quot;, editUserDTO);&#10;        model.addAttribute(&quot;departments&quot;, departments);&#10;        model.addAttribute(&quot;roles&quot;, roles);&#10;&#10;        return &quot;users/edit&quot;;&#10;    }&#10;&#10;    //&#10;    @PostMapping(&quot;/{id}/update&quot;)&#10;    public String updateUser(@PathVariable(&quot;id&quot;) int id,&#10;                             @Validated @ModelAttribute(&quot;user&quot;) EditUserDTO editUserDTO,&#10;                             BindingResult result,&#10;                             Model model) throws IOException {&#10;        UserDTO existingUser = userService.getUserById(id);&#10;        if (existingUser == null) {&#10;            return &quot;errors/404&quot;; // Redirect if user not found&#10;        }&#10;&#10;        if (result.hasErrors()) {&#10;            // Nếu có lỗi, nạp lại các dữ liệu cần thiết cho form&#10;            List&lt;DepartmentDTO&gt; departments = departmentService.getAllDepartments();&#10;            List&lt;RoleDTO&gt; roles = roleService.getAllRoles();&#10;            model.addAttribute(&quot;departments&quot;, departments);&#10;            model.addAttribute(&quot;roles&quot;, roles);&#10;            return &quot;users/edit&quot;; // Trả lại view edit với các lỗi validation&#10;        }&#10;&#10;        userService.updateUser(id, editUserDTO);&#10;        return &quot;redirect:/admin/users&quot;;&#10;    }&#10;&#10;    @GetMapping(&quot;/search&quot;)&#10;    public String searchUsers(@RequestParam(value = &quot;query&quot;, required = false) String query,&#10;                              @RequestParam(value = &quot;page&quot;, defaultValue = &quot;0&quot;) int page,&#10;                              @RequestParam(value = &quot;size&quot;, defaultValue = &quot;10&quot;) int size,&#10;                              Model model) {&#10;&#10;        if (query != null &amp;&amp; !query.trim().isEmpty()) {&#10;            Pageable pageable = PageRequest.of(page, size);&#10;            Page&lt;UserDTO&gt; usersPage = userService.searchUsers(query.trim(), pageable);&#10;            model.addAttribute(&quot;users&quot;, usersPage.getContent());&#10;            model.addAttribute(&quot;currentPage&quot;, page);&#10;            model.addAttribute(&quot;totalPages&quot;, usersPage.getTotalPages());&#10;        } else {&#10;           ListUserResponse listResp = userService.getAllUsers(page, size);&#10;            model.addAttribute(&quot;users&quot;, listResp.getUsers());&#10;            model.addAttribute(&quot;currentPage&quot;, listResp.getCurrentPage());&#10;            model.addAttribute(&quot;totalPages&quot;, listResp.getTotalPage());&#10;        }&#10;&#10;        model.addAttribute(&quot;query&quot;, query);&#10;        model.addAttribute(&quot;departments&quot;, departmentService.getAllDepartments());&#10;        model.addAttribute(&quot;roles&quot;, roleService.getAllRoles());&#10;&#10;        return &quot;users/list&quot;;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.codegym.demo16.controllers;&#10;&#10;import com.codegym.demo16.dto.CreateUserDTO;&#10;import com.codegym.demo16.dto.DepartmentDTO;&#10;import com.codegym.demo16.dto.EditUserDTO;&#10;import com.codegym.demo16.dto.UserDTO;&#10;import com.codegym.demo16.dto.RoleDTO;&#10;import com.codegym.demo16.dto.response.ListDepartmentResponse;&#10;import com.codegym.demo16.dto.response.ListUserResponse;&#10;import com.codegym.demo16.services.DepartmentService;&#10;import com.codegym.demo16.services.RoleService;&#10;import com.codegym.demo16.services.UserService;&#10;import jakarta.servlet.http.Cookie;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.ui.Model;&#10;import org.springframework.validation.BindingResult;&#10;import org.springframework.validation.annotation.Validated;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;&#10;import java.io.IOException;&#10;import java.util.List;&#10;&#10;@Controller&#10;@RequestMapping(&quot;/admin/users&quot;)&#10;public class UserController {&#10;    private final UserService userService;&#10;    private final DepartmentService departmentService;&#10;    private final RoleService roleService;&#10;    private final HttpSession httpSession;&#10;&#10;&#10;    public UserController(UserService userService, DepartmentService departmentService, RoleService roleService, HttpSession httpSession) {&#10;        this.userService = userService;&#10;        this.departmentService = departmentService;&#10;        this.roleService = roleService;&#10;        this.httpSession = httpSession;&#10;&#10;    }&#10;&#10;&#10;    @GetMapping&#10;    public String listUsers(@CookieValue(value = &quot;counter&quot;, defaultValue = &quot;1&quot;) String counter,&#10;                            @RequestParam(value = &quot;page&quot;, required = false, defaultValue = &quot;1&quot;) int page,&#10;                            @RequestParam(value = &quot;size&quot;, required = false, defaultValue = &quot;5&quot;) int size,&#10;                            @RequestParam(value = &quot;departmentId&quot;, required = false) Long departmentId,&#10;                            Model model,&#10;                            HttpServletResponse response) {&#10;        if (page &lt; 1) {&#10;            page = 1;&#10;        } else {&#10;            page -= 1;&#10;        }&#10;&#10;        Cookie myCookie = new Cookie(&quot;msg&quot;, &quot;Hello&quot;);&#10;        int total = Integer.parseInt(counter) + 1;&#10;        Cookie counterViewPage = new Cookie(&quot;counter&quot;, total + &quot;&quot;);&#10;        myCookie.setMaxAge(60);&#10;        counterViewPage.setMaxAge(60);&#10;        response.addCookie(myCookie);&#10;        response.addCookie(counterViewPage);&#10;&#10;        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();&#10;        String email = authentication.getName();&#10;        httpSession.setAttribute(&quot;email&quot;, email);&#10;&#10;        List&lt;UserDTO&gt; users;&#10;        int totalPages;&#10;&#10;        if (departmentId != null) {&#10;            users = userService.filterUsersByDepartment(departmentId, page, size);&#10;            totalPages = 1; // nếu lọc thì không cần nhiều trang, hoặc bạn tự tính lại&#10;        } else {&#10;            ListUserResponse listUserResponse = userService.getAllUsers(page, size);&#10;            users = listUserResponse.getUsers();&#10;            totalPages = listUserResponse.getTotalPage();&#10;        }&#10;&#10;        model.addAttribute(&quot;users&quot;, users);&#10;        model.addAttribute(&quot;totalPages&quot;, totalPages);&#10;        model.addAttribute(&quot;totalViewPage&quot;, counter);&#10;&#10;        // Gửi list department xuống để vẽ dropdown lọc&#10;        model.addAttribute(&quot;departments&quot;, departmentService.getAllDepartments());&#10;        model.addAttribute(&quot;selectedDepartmentId&quot;, departmentId);&#10;&#10;        return &quot;users/list&quot;;&#10;    }&#10;&#10;&#10;&#10;    @GetMapping(&quot;/create&quot;)&#10;    public String createUser(Model model) {&#10;        CreateUserDTO createUserDTO = new CreateUserDTO();&#10;        List&lt;DepartmentDTO&gt; departments = departmentService.getAllDepartments();&#10;        List&lt;RoleDTO&gt; roles = roleService.getAllRoles(); // ✅ sửa thành RoleDTO&#10;&#10;        model.addAttribute(&quot;departments&quot;, departments);&#10;        model.addAttribute(&quot;roles&quot;, roles); // ✅ dùng &quot;roles&quot; giống edit&#10;        model.addAttribute(&quot;user&quot;, createUserDTO);&#10;&#10;        return &quot;users/create&quot;;&#10;    }&#10;&#10;&#10;    @GetMapping(&quot;/{id}/detail&quot;)&#10;    public String userDetail(@PathVariable(&quot;id&quot;) String id,&#10;                             Model model) {&#10;        model.addAttribute(&quot;id&quot;, id);&#10;        return &quot;users/detail&quot;; // This will resolve to /WEB-INF/views/users/detail.html&#10;    }&#10;&#10;&#10;    @GetMapping(&quot;/{id}/delete&quot;)&#10;    public String deleteUser(@PathVariable(&quot;id&quot;) int id) {&#10;        UserDTO user = userService.getUserById(id);&#10;        if (user == null) {&#10;            return &quot;errors/404&quot;;&#10;        }&#10;        userService.deleteUser(id);&#10;        return &quot;redirect:/admin/users&quot;;&#10;    }&#10;    @ExceptionHandler(RuntimeException.class)&#10;    public String handlerRuntimeException(){&#10;        return &quot;errors/500&quot;;&#10;    }&#10;//&#10;&#10;    @PostMapping(&quot;/create&quot;)&#10;    public String storeUser(@Validated @ModelAttribute(&quot;user&quot;) CreateUserDTO createUserDTO,&#10;                            BindingResult result,&#10;                            Model model) throws IOException {&#10;        if (result.hasErrors()) {&#10;            List&lt;DepartmentDTO&gt; departments = departmentService.getAllDepartments();&#10;            List&lt;RoleDTO&gt; roles = roleService.getAllRoles();&#10;            model.addAttribute(&quot;departments&quot;, departments);&#10;            model.addAttribute(&quot;roles&quot;, roles);&#10;            // Ensure the form reloads with the submitted data and errors&#10;            model.addAttribute(&quot;user&quot;, createUserDTO);&#10;            return &quot;users/create&quot;;&#10;        }&#10;&#10;        // Nếu không có lỗi thì lưu user&#10;        userService.storeUser(createUserDTO);&#10;        return &quot;redirect:/admin/users&quot;;&#10;    }&#10;&#10;&#10;    @GetMapping(&quot;/{id}/edit&quot;)&#10;    public String showFormEdit(@PathVariable(&quot;id&quot;) int id, Model model) {&#10;        UserDTO user = userService.getUserById(id);&#10;        if (user == null) {&#10;            return &quot;errors/404&quot;;&#10;        }&#10;&#10;        EditUserDTO editUserDTO = new EditUserDTO(&#10;                Math.toIntExact(user.getId()),&#10;                user.getUsername(),&#10;                user.getEmail(),&#10;                user.getPhone()&#10;        );&#10;        editUserDTO.setDepartmentId(user.getDepartmentId());&#10;        editUserDTO.setRoleId(user.getRoleId()); //  Sửa ở đây&#10;&#10;        List&lt;DepartmentDTO&gt; departments = departmentService.getAllDepartments();&#10;        List&lt;RoleDTO&gt; roles = roleService.getAllRoles();&#10;&#10;        model.addAttribute(&quot;user&quot;, editUserDTO);&#10;        model.addAttribute(&quot;departments&quot;, departments);&#10;        model.addAttribute(&quot;roles&quot;, roles);&#10;&#10;        return &quot;users/edit&quot;;&#10;    }&#10;&#10;    //&#10;    @PostMapping(&quot;/{id}/update&quot;)&#10;    public String updateUser(@PathVariable(&quot;id&quot;) int id,&#10;                             @Validated @ModelAttribute(&quot;user&quot;) EditUserDTO editUserDTO,&#10;                             BindingResult result,&#10;                             Model model) throws IOException {&#10;        UserDTO existingUser = userService.getUserById(id);&#10;        if (existingUser == null) {&#10;            return &quot;errors/404&quot;; // Redirect if user not found&#10;        }&#10;&#10;        if (result.hasErrors()) {&#10;            // Nếu có lỗi, nạp lại các dữ liệu cần thiết cho form&#10;            List&lt;DepartmentDTO&gt; departments = departmentService.getAllDepartments();&#10;            List&lt;RoleDTO&gt; roles = roleService.getAllRoles();&#10;            model.addAttribute(&quot;departments&quot;, departments);&#10;            model.addAttribute(&quot;roles&quot;, roles);&#10;            return &quot;users/edit&quot;; // Trả lại view edit với các lỗi validation&#10;        }&#10;&#10;        userService.updateUser(id, editUserDTO);&#10;        return &quot;redirect:/admin/users&quot;;&#10;    }&#10;&#10;    @GetMapping(&quot;/search&quot;)&#10;    public String searchUsers(@RequestParam(value = &quot;query&quot;, required = false) String query,&#10;                              @RequestParam(value = &quot;page&quot;, defaultValue = &quot;0&quot;) int page,&#10;                              @RequestParam(value = &quot;size&quot;, defaultValue = &quot;10&quot;) int size,&#10;                              Model model) {&#10;&#10;        if (query != null &amp;&amp; !query.trim().isEmpty()) {&#10;            Pageable pageable = PageRequest.of(page, size);&#10;            Page&lt;UserDTO&gt; usersPage = userService.searchUsers(query.trim(), pageable);&#10;            model.addAttribute(&quot;users&quot;, usersPage.getContent());&#10;            model.addAttribute(&quot;currentPage&quot;, page);&#10;            model.addAttribute(&quot;totalPages&quot;, usersPage.getTotalPages());&#10;        } else {&#10;           ListUserResponse listResp = userService.getAllUsers(page, size);&#10;            model.addAttribute(&quot;users&quot;, listResp.getUsers());&#10;            model.addAttribute(&quot;currentPage&quot;, listResp.getCurrentPage());&#10;            model.addAttribute(&quot;totalPages&quot;, listResp.getTotalPage());&#10;        }&#10;&#10;        model.addAttribute(&quot;query&quot;, query);&#10;        model.addAttribute(&quot;departments&quot;, departmentService.getAllDepartments());&#10;        model.addAttribute(&quot;roles&quot;, roleService.getAllRoles());&#10;&#10;        return &quot;users/list&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/codegym/demo16/dto/UserDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/codegym/demo16/dto/UserDTO.java" />
              <option name="originalContent" value="package com.codegym.demo16.dto;&#10;&#10;public class UserDTO {&#10;    private int id;&#10;    private String username;&#10;    private String password;&#10;    private String email;&#10;    private String phone;&#10;    private String imageUrl;&#10;    private String departmentName;&#10;    private Long departmentId;&#10;    private String roleName;&#10;    private String roleId;&#10;&#10;    public UserDTO() {&#10;    }&#10;&#10;    public UserDTO(int id, String username, String password, String email, String phone) {&#10;        this.id = id;&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;        this.phone = phone;&#10;    }&#10;&#10;    public UserDTO(String username, String password, String email, String phone) {&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;        this.phone = phone;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPhone() {&#10;        return phone;&#10;    }&#10;&#10;    public void setPhone(String phone) {&#10;        this.phone = phone;&#10;    }&#10;&#10;    public void setImageUrl(String imageUrl) {&#10;        this.imageUrl = imageUrl;&#10;    }&#10;&#10;    public String getImageUrl() {&#10;        return imageUrl;&#10;    }&#10;&#10;    public String getDepartmentName() {&#10;        return departmentName;&#10;    }&#10;&#10;    public void setDepartmentName(String departmentName) {&#10;        this.departmentName = departmentName;&#10;    }&#10;&#10;    public Long getDepartmentId() {&#10;        return departmentId;&#10;    }&#10;&#10;    public void setDepartmentId(Long departmentId) {&#10;        this.departmentId = departmentId;&#10;    }&#10;&#10;    public String getRoleName() {&#10;        return roleName;&#10;    }&#10;&#10;    public void setRoleName(String roleName) {&#10;        this.roleName = roleName;&#10;    }&#10;&#10;    public Long getRoleId() {&#10;        if (roleId == null || roleId.trim().isEmpty()) {&#10;            return null;&#10;        }&#10;        return Long.parseLong(roleId);&#10;    }&#10;&#10;    public void setRoleId(String roleId) {&#10;        this.roleId = roleId;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.codegym.demo16.dto;&#10;&#10;public class UserDTO {&#10;    private int id;&#10;    private String username;&#10;    private String password;&#10;    private String email;&#10;    private String phone;&#10;    private String imageUrl;&#10;    private String departmentName;&#10;    private Long departmentId;&#10;    private String roleName;&#10;    private String roleId;&#10;&#10;    public UserDTO() {&#10;    }&#10;&#10;    public UserDTO(int id, String username, String password, String email, String phone) {&#10;        this.id = id;&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;        this.phone = phone;&#10;    }&#10;&#10;    public UserDTO(String username, String password, String email, String phone) {&#10;        this.username = username;&#10;        this.password = password;&#10;        this.email = email;&#10;        this.phone = phone;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPhone() {&#10;        return phone;&#10;    }&#10;&#10;    public void setPhone(String phone) {&#10;        this.phone = phone;&#10;    }&#10;&#10;    public void setImageUrl(String imageUrl) {&#10;        this.imageUrl = imageUrl;&#10;    }&#10;&#10;    public String getImageUrl() {&#10;        return imageUrl;&#10;    }&#10;&#10;    public String getDepartmentName() {&#10;        return departmentName;&#10;    }&#10;&#10;    public void setDepartmentName(String departmentName) {&#10;        this.departmentName = departmentName;&#10;    }&#10;&#10;    public Long getDepartmentId() {&#10;        return departmentId;&#10;    }&#10;&#10;    public void setDepartmentId(Long departmentId) {&#10;        this.departmentId = departmentId;&#10;    }&#10;&#10;    public String getRoleName() {&#10;        return roleName;&#10;    }&#10;&#10;    public void setRoleName(String roleName) {&#10;        this.roleName = roleName;&#10;    }&#10;&#10;    public Long getRoleId() {&#10;        if (roleId == null || roleId.trim().isEmpty()) {&#10;            return null;&#10;        }&#10;        try {&#10;            return Long.parseLong(roleId);&#10;        } catch (NumberFormatException e) {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public void setRoleId(String roleId) {&#10;        this.roleId = roleId;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/codegym/demo16/models/Role.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/codegym/demo16/models/Role.java" />
              <option name="originalContent" value="package com.codegym.demo16.models;&#10;&#10;import jakarta.persistence.*;&#10;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;roles&quot;)&#10;public class Role {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String name; // ADMIN, USER, MANAGER...&#10;&#10;    private String description;&#10;&#10;    // Quan hệ 1 Role - N Users&#10;    @OneToMany(mappedBy = &quot;role&quot;)&#10;    private java.util.List&lt;User&gt; users;&#10;&#10;    public Role() {&#10;    }&#10;&#10;    public Role(Long id, String name, String description) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.description = description;&#10;    }&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public List&lt;User&gt; getUsers() {&#10;        return users;&#10;    }&#10;&#10;    public void setUsers(List&lt;User&gt; users) {&#10;        this.users = users;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.codegym.demo16.models;&#10;&#10;import jakarta.persistence.*;&#10;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;roles&quot;)&#10;public class Role {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String name; // ADMIN, USER, MANAGER...&#10;&#10;    private String description;&#10;&#10;    // Quan hệ N Role - N Users&#10;    @ManyToMany(mappedBy = &quot;roles&quot;)&#10;    private java.util.Set&lt;User&gt; users;&#10;&#10;    public Role() {&#10;    }&#10;&#10;    public Role(Long id, String name, String description) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.description = description;&#10;    }&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public java.util.Set&lt;User&gt; getUsers() {&#10;        return users;&#10;    }&#10;&#10;    public void setUsers(java.util.Set&lt;User&gt; users) {&#10;        this.users = users;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/codegym/demo16/models/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/codegym/demo16/models/User.java" />
              <option name="originalContent" value="package com.codegym.demo16.models;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class User {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false)&#10;    private String name;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String email;&#10;&#10;    @Column(nullable = false)&#10;    private String password;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String phone;&#10;&#10;    @Column(nullable = true)&#10;    private String imageUrl;&#10;&#10;    // relationship with Department can be added here if needed&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;department_id&quot;, nullable = true)&#10;    private Department department;&#10;&#10;    public User() {&#10;    }&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;role_id&quot;, nullable = false)&#10;    private Role role;&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getPhone() {&#10;        return phone;&#10;    }&#10;&#10;    public void setPhone(String phone) {&#10;        this.phone = phone;&#10;    }&#10;&#10;    public String getImageUrl() {&#10;        return imageUrl;&#10;    }&#10;&#10;    public void setImageUrl(String imageUrl) {&#10;        this.imageUrl = imageUrl;&#10;    }&#10;&#10;    public void setDepartment(Department department) {&#10;        this.department = department;&#10;    }&#10;&#10;    public Department getDepartment() {&#10;        return department;&#10;    }&#10;&#10;    public Role getRole() {&#10;        return role;&#10;    }&#10;&#10;    public void setRole(Role role) {&#10;        this.role = role;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.codegym.demo16.models;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class User {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(nullable = false)&#10;    private String name;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String email;&#10;&#10;    @Column(nullable = false)&#10;    private String password;&#10;&#10;    @Column(nullable = false, unique = true)&#10;    private String phone;&#10;&#10;    @Column(nullable = true)&#10;    private String imageUrl;&#10;&#10;    // relationship with Department can be added here if needed&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;department_id&quot;, nullable = true)&#10;    private Department department;&#10;&#10;    public User() {&#10;    }&#10;&#10;    @ManyToMany(fetch = FetchType.EAGER)&#10;    @JoinTable(&#10;        name = &quot;user_roles&quot;,&#10;        joinColumns = @JoinColumn(name = &quot;user_id&quot;),&#10;        inverseJoinColumns = @JoinColumn(name = &quot;role_id&quot;)&#10;    )&#10;    private java.util.Set&lt;Role&gt; roles = new java.util.HashSet&lt;&gt;();&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getPhone() {&#10;        return phone;&#10;    }&#10;&#10;    public void setPhone(String phone) {&#10;        this.phone = phone;&#10;    }&#10;&#10;    public String getImageUrl() {&#10;        return imageUrl;&#10;    }&#10;&#10;    public void setImageUrl(String imageUrl) {&#10;        this.imageUrl = imageUrl;&#10;    }&#10;&#10;    public void setDepartment(Department department) {&#10;        this.department = department;&#10;    }&#10;&#10;    public Department getDepartment() {&#10;        return department;&#10;    }&#10;&#10;    public java.util.Set&lt;Role&gt; getRoles() {&#10;        return roles;&#10;    }&#10;&#10;    public void setRoles(java.util.Set&lt;Role&gt; roles) {&#10;        this.roles = roles;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/codegym/demo16/services/CustomUserDetailsService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/codegym/demo16/services/CustomUserDetailsService.java" />
              <option name="originalContent" value="package com.codegym.demo16.services;&#10;&#10;import com.codegym.demo16.models.User;&#10;import com.codegym.demo16.repositories.IUserRepository;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.security.core.authority.SimpleGrantedAuthority;&#10;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class CustomUserDetailsService implements UserDetailsService {&#10;&#10;    private final IUserRepository userRepository;&#10;&#10;    public CustomUserDetailsService(IUserRepository userRepository) {&#10;        this.userRepository  = userRepository;&#10;    }&#10;&#10;    @Override&#10;    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {&#10;        Optional&lt;User&gt; user = this.userRepository.findByEmail(username);&#10;        if (user.isEmpty()) {&#10;            throw new UsernameNotFoundException(&quot;User not found&quot;);&#10;        }&#10;&#10;        User userLogin = user.get();&#10;&#10;        return new org.springframework.security.core.userdetails.User(&#10;                userLogin.getEmail(),&#10;                userLogin.getPassword(),&#10;                userLogin.getRole().stream().map(role -&gt; new SimpleGrantedAuthority(role.getName())).collect(Collectors.toList())&#10;        );&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.codegym.demo16.services;&#10;&#10;import com.codegym.demo16.models.User;&#10;import com.codegym.demo16.repositories.IUserRepository;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.security.core.authority.SimpleGrantedAuthority;&#10;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class CustomUserDetailsService implements UserDetailsService {&#10;&#10;    private final IUserRepository userRepository;&#10;&#10;    public CustomUserDetailsService(IUserRepository userRepository) {&#10;        this.userRepository  = userRepository;&#10;    }&#10;&#10;    @Override&#10;    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {&#10;        Optional&lt;User&gt; user = this.userRepository.findByEmail(username);&#10;        if (user.isEmpty()) {&#10;            throw new UsernameNotFoundException(&quot;User not found&quot;);&#10;        }&#10;&#10;        User userLogin = user.get();&#10;&#10;        return new org.springframework.security.core.userdetails.User(&#10;                userLogin.getEmail(),&#10;                userLogin.getPassword(),&#10;                userLogin.getRoles().stream().map(role -&gt; new SimpleGrantedAuthority(&quot;ROLE_&quot; + role.getName())).collect(Collectors.toList())&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/codegym/demo16/services/UserService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/codegym/demo16/services/UserService.java" />
              <option name="originalContent" value="package com.codegym.demo16.services;&#10;&#10;import com.codegym.demo16.dto.CreateUserDTO;&#10;import com.codegym.demo16.dto.EditUserDTO;&#10;import com.codegym.demo16.dto.UserDTO;&#10;import com.codegym.demo16.dto.response.ListDepartmentResponse;&#10;import com.codegym.demo16.dto.response.ListUserResponse;&#10;import com.codegym.demo16.models.Department;&#10;import com.codegym.demo16.models.Role;&#10;import com.codegym.demo16.models.User;&#10;import com.codegym.demo16.repositories.IDepartmentRepository;&#10;import com.codegym.demo16.repositories.IUserRepository;&#10;import com.codegym.demo16.untils.FileManager;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import com.codegym.demo16.repositories.IRoleRepository;&#10;&#10;import java.util.*;&#10;&#10;@Service&#10;public class UserService {&#10;    private static final String UPLOAD_DIR = &quot;/Users/mac/Documents/demo16/uploads&quot;;&#10;    private final IUserRepository userRepository;&#10;    private final IDepartmentRepository departmentRepository;&#10;    private final FileManager fileManager;&#10;    private final IRoleRepository roleRepository;&#10;&#10;    public UserService(IUserRepository userRepository, IDepartmentRepository departmentRepository, FileManager fileManager, IRoleRepository roleRepository) {&#10;        this.userRepository = userRepository;&#10;        this.departmentRepository = departmentRepository;&#10;        this.fileManager = fileManager;&#10;        this.roleRepository = roleRepository;&#10;    }&#10;&#10;    public ListUserResponse getAllUsers(int pageNumber, int pageSize) {&#10;        Pageable pageable = PageRequest.of(pageNumber, pageSize, Sort.by(&quot;id&quot;).ascending());&#10;        Page&lt;User&gt; data = userRepository.findAll(pageable);&#10;        System.out.println(&quot;Total page: &quot; + data.getTotalPages());&#10;        List&lt;User&gt; users = data.getContent();&#10;&#10;        // map data Entity to DTO&#10;        List&lt;UserDTO&gt; userDTOs = new ArrayList&lt;&gt;();&#10;        for (User user : users) {&#10;            UserDTO userDTO = new UserDTO();&#10;            userDTO.setId(user.getId().intValue());&#10;            userDTO.setUsername(user.getName());&#10;            userDTO.setEmail(user.getEmail());&#10;            userDTO.setPhone(user.getPhone());&#10;            userDTO.setImageUrl(user.getImageUrl());&#10;&#10;            String nameDepartment = user.getDepartment() != null ? user.getDepartment().getName() : &quot;No Department&quot;;&#10;            userDTO.setDepartmentName(nameDepartment);&#10;&#10;            // Fix: Handle multiple roles&#10;            String roleName = &quot;No Role&quot;;&#10;            if (user.getRoles() != null &amp;&amp; !user.getRoles().isEmpty()) {&#10;                roleName = user.getRoles().iterator().next().getName(); // get first role name&#10;            }&#10;            userDTO.setRoleName(roleName);&#10;&#10;&#10;            userDTOs.add(userDTO);&#10;        }&#10;&#10;        ListUserResponse listUserResponse = new ListUserResponse();&#10;        listUserResponse.setTotalPage(data.getTotalPages());&#10;        listUserResponse.setCurrentPage(data.getNumber());&#10;        listUserResponse.setUsers(userDTOs);&#10;&#10;        return listUserResponse;&#10;    }&#10;&#10;    //xoá user + file ảnh&#10;    public void deleteUser(int id) {&#10;        Optional&lt;User&gt; user = userRepository.findById((long) id);&#10;        if (user.isPresent()) {&#10;            User currentUser = user.get();&#10;            // Xoá file ảnh&#10;            String imageUrl = currentUser.getImageUrl();&#10;            if (imageUrl != null &amp;&amp; !imageUrl.isEmpty()) {&#10;                fileManager.deleteFile(UPLOAD_DIR + &quot;/&quot; + imageUrl);&#10;            }&#10;            // Xoá user khỏi DB&#10;            userRepository.deleteById((long) id);&#10;        }&#10;    }&#10;&#10;    public void storeUser(CreateUserDTO createUserDTO) {&#10;        User newUser = new User();&#10;        newUser.setName(createUserDTO.getUsername());&#10;        newUser.setEmail(createUserDTO.getEmail());&#10;        newUser.setPassword(createUserDTO.getPassword()); // =&gt; nhớ encode&#10;        newUser.setPhone(createUserDTO.getPhone());&#10;&#10;        // Upload ảnh&#10;        MultipartFile file = createUserDTO.getImage();&#10;        if (file != null &amp;&amp; !file.isEmpty()) {&#10;            String fileName = fileManager.uploadFile(UPLOAD_DIR, file);&#10;            newUser.setImageUrl(fileName);&#10;        }&#10;&#10;        // Department&#10;        if (createUserDTO.getDepartmentId() != null) {&#10;            Department department = departmentRepository.findById(createUserDTO.getDepartmentId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Department not found&quot;));&#10;            newUser.setDepartment(department);&#10;        }&#10;&#10;        // Role&#10;        if (createUserDTO.getRoleId() == null) {&#10;            throw new RuntimeException(&quot;Role is required&quot;);&#10;        }&#10;        Role role = roleRepository.findById(createUserDTO.getRoleId())&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Role not found&quot;));&#10;        newUser.setRoles(new HashSet&lt;&gt;(Collections.singletonList(role)));&#10;&#10;        userRepository.save(newUser);&#10;    }&#10;&#10;&#10;&#10;    public UserDTO getUserById(int id) {&#10;        Optional&lt;User&gt; user = userRepository.findById((long) id);&#10;        if (user.isPresent()) {&#10;            User currentUser = user.get();&#10;            UserDTO userDTO = new UserDTO();&#10;            userDTO.setId(currentUser.getId().intValue());&#10;            userDTO.setUsername(currentUser.getName());&#10;            userDTO.setEmail(currentUser.getEmail());&#10;            userDTO.setPhone(currentUser.getPhone());&#10;            userDTO.setImageUrl(currentUser.getImageUrl());&#10;            userDTO.setDepartmentId(currentUser.getDepartment() != null ? currentUser.getDepartment().getId() : null);&#10;            // Fix: get first role id as String&#10;            String roleIdStr = null;&#10;            if (currentUser.getRoles() != null &amp;&amp; !currentUser.getRoles().isEmpty()) {&#10;                roleIdStr = String.valueOf(currentUser.getRoles().iterator().next().getId());&#10;            }&#10;            userDTO.setRoleId(roleIdStr);&#10;            return userDTO;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    //&#10;    public void updateUser(int id, EditUserDTO editUserDTO) {&#10;        Optional&lt;User&gt; user = userRepository.findById((long) id);&#10;        if (user.isPresent()) {&#10;            // Update user details&#10;            User currentUser = user.get();&#10;            currentUser.setName(editUserDTO.getUsername());&#10;            currentUser.setEmail(editUserDTO.getEmail());&#10;            currentUser.setPhone(editUserDTO.getPhone());&#10;&#10;            Long departmentId = editUserDTO.getDepartmentId();&#10;            if (departmentId != null) {&#10;                Department department = departmentRepository.findById(departmentId).orElse(null);&#10;                if (department != null) {&#10;                    currentUser.setDepartment(department);&#10;                }&#10;            }&#10;&#10;            MultipartFile file = editUserDTO.getImage();&#10;            if (!file.isEmpty()) {&#10;                // 1. xoa anh cu&#10;                fileManager.deleteFile(UPLOAD_DIR + &quot;/&quot; + currentUser.getImageUrl());&#10;                String fileName = fileManager.uploadFile(UPLOAD_DIR, file);&#10;                currentUser.setImageUrl(fileName); // Set the image URL&#10;            }&#10;&#10;            // Cập nhật Role (bắt buộc)&#10;            Long roleID = editUserDTO.getRoleId();&#10;            if (roleID != null) {&#10;                Role role = roleRepository.findById(roleID).orElse(null);&#10;                if (role != null) {&#10;                    Set&lt;Role&gt; roles = new HashSet&lt;&gt;();&#10;                    roles.add(role);&#10;                    currentUser.setRoles(roles); // Fix: setRoles instead of setRole&#10;                }&#10;            }&#10;            userRepository.save(currentUser);&#10;        }&#10;    }&#10;&#10;    public Page&lt;UserDTO&gt; searchUsers(String query, Pageable pageable) {&#10;        Page&lt;User&gt; users = userRepository&#10;                .findByNameContainingIgnoreCaseOrEmailContainingIgnoreCaseOrPhoneContainingIgnoreCase(&#10;                        query, query, query, pageable);&#10;&#10;        return users.map(user -&gt; {&#10;            UserDTO userDTO = new UserDTO();&#10;            userDTO.setId(user.getId().intValue());&#10;            userDTO.setUsername(user.getName());&#10;            userDTO.setEmail(user.getEmail());&#10;            userDTO.setPhone(user.getPhone());&#10;            userDTO.setImageUrl(user.getImageUrl());&#10;            String nameDepartment = user.getDepartment() != null ? user.getDepartment().getName() : &quot;No Department&quot;;&#10;            userDTO.setDepartmentName(nameDepartment);&#10;            String roleName = &quot;No Role&quot;;&#10;            if (user.getRoles() != null &amp;&amp; !user.getRoles().isEmpty()) {&#10;                roleName = user.getRoles().iterator().next().getName();&#10;            }&#10;            userDTO.setRoleName(roleName);&#10;            return userDTO;&#10;        });&#10;    }&#10;&#10;    public List&lt;UserDTO&gt; filterUsersByDepartment(Long departmentId, int page, int size) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;User&gt; users = userRepository.findByDepartmentId(departmentId, pageable);&#10;&#10;        return users.stream().map(user -&gt; {&#10;            UserDTO dto = new UserDTO();&#10;            dto.setId(user.getId().intValue());&#10;            dto.setUsername(user.getName());&#10;            dto.setEmail(user.getEmail());&#10;            dto.setPhone(user.getPhone());&#10;            dto.setImageUrl(user.getImageUrl());&#10;            dto.setDepartmentName(user.getDepartment() != null ? user.getDepartment().getName() : &quot;No Department&quot;);&#10;            dto.setRoleName(user.getRoles() != null &amp;&amp; !user.getRoles().isEmpty() ? user.getRoles().iterator().next().getName() : &quot;No Role&quot;);&#10;            return dto;&#10;        }).toList();&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.codegym.demo16.services;&#10;&#10;import com.codegym.demo16.dto.CreateUserDTO;&#10;import com.codegym.demo16.dto.EditUserDTO;&#10;import com.codegym.demo16.dto.UserDTO;&#10;import com.codegym.demo16.dto.response.ListDepartmentResponse;&#10;import com.codegym.demo16.dto.response.ListUserResponse;&#10;import com.codegym.demo16.models.Department;&#10;import com.codegym.demo16.models.Role;&#10;import com.codegym.demo16.models.User;&#10;import com.codegym.demo16.repositories.IDepartmentRepository;&#10;import com.codegym.demo16.repositories.IUserRepository;&#10;import com.codegym.demo16.untils.FileManager;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import com.codegym.demo16.repositories.IRoleRepository;&#10;&#10;import java.util.*;&#10;&#10;@Service&#10;public class UserService {&#10;    private static final String UPLOAD_DIR = &quot;/Users/mac/Documents/demo16/uploads&quot;;&#10;    private final IUserRepository userRepository;&#10;    private final IDepartmentRepository departmentRepository;&#10;    private final FileManager fileManager;&#10;    private final IRoleRepository roleRepository;&#10;&#10;    public UserService(IUserRepository userRepository, IDepartmentRepository departmentRepository, FileManager fileManager, IRoleRepository roleRepository) {&#10;        this.userRepository = userRepository;&#10;        this.departmentRepository = departmentRepository;&#10;        this.fileManager = fileManager;&#10;        this.roleRepository = roleRepository;&#10;    }&#10;&#10;    public ListUserResponse getAllUsers(int pageNumber, int pageSize) {&#10;        Pageable pageable = PageRequest.of(pageNumber, pageSize, Sort.by(&quot;id&quot;).ascending());&#10;        Page&lt;User&gt; data = userRepository.findAll(pageable);&#10;        System.out.println(&quot;Total page: &quot; + data.getTotalPages());&#10;        List&lt;User&gt; users = data.getContent();&#10;&#10;        // map data Entity to DTO&#10;        List&lt;UserDTO&gt; userDTOs = new ArrayList&lt;&gt;();&#10;        for (User user : users) {&#10;            UserDTO userDTO = new UserDTO();&#10;            userDTO.setId(user.getId().intValue());&#10;            userDTO.setUsername(user.getName());&#10;            userDTO.setEmail(user.getEmail());&#10;            userDTO.setPhone(user.getPhone());&#10;            userDTO.setImageUrl(user.getImageUrl());&#10;&#10;            String nameDepartment = user.getDepartment() != null ? user.getDepartment().getName() : &quot;No Department&quot;;&#10;            userDTO.setDepartmentName(nameDepartment);&#10;&#10;            // Fix: Handle multiple roles&#10;            String roleName = &quot;No Role&quot;;&#10;            if (user.getRoles() != null &amp;&amp; !user.getRoles().isEmpty()) {&#10;                roleName = user.getRoles().iterator().next().getName(); // get first role name&#10;            }&#10;            userDTO.setRoleName(roleName);&#10;&#10;&#10;            userDTOs.add(userDTO);&#10;        }&#10;&#10;        ListUserResponse listUserResponse = new ListUserResponse();&#10;        listUserResponse.setTotalPage(data.getTotalPages());&#10;        listUserResponse.setCurrentPage(data.getNumber());&#10;        listUserResponse.setUsers(userDTOs);&#10;&#10;        return listUserResponse;&#10;    }&#10;&#10;    //xoá user + file ảnh&#10;    public void deleteUser(int id) {&#10;        Optional&lt;User&gt; user = userRepository.findById((long) id);&#10;        if (user.isPresent()) {&#10;            User currentUser = user.get();&#10;            // Xoá file ảnh&#10;            String imageUrl = currentUser.getImageUrl();&#10;            if (imageUrl != null &amp;&amp; !imageUrl.isEmpty()) {&#10;                fileManager.deleteFile(UPLOAD_DIR + &quot;/&quot; + imageUrl);&#10;            }&#10;            // Xoá user khỏi DB&#10;            userRepository.deleteById((long) id);&#10;        }&#10;    }&#10;&#10;    public void storeUser(CreateUserDTO createUserDTO) {&#10;        User newUser = new User();&#10;        newUser.setName(createUserDTO.getUsername());&#10;        newUser.setEmail(createUserDTO.getEmail());&#10;        newUser.setPassword(createUserDTO.getPassword()); // =&gt; nhớ encode&#10;        newUser.setPhone(createUserDTO.getPhone());&#10;&#10;        // Upload ảnh&#10;        MultipartFile file = createUserDTO.getImage();&#10;        if (file != null &amp;&amp; !file.isEmpty()) {&#10;            String fileName = fileManager.uploadFile(UPLOAD_DIR, file);&#10;            newUser.setImageUrl(fileName);&#10;        }&#10;&#10;        // Department&#10;        if (createUserDTO.getDepartmentId() != null) {&#10;            Department department = departmentRepository.findById(createUserDTO.getDepartmentId())&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;Department not found&quot;));&#10;            newUser.setDepartment(department);&#10;        }&#10;&#10;        // Role&#10;        Long roleId = createUserDTO.getRoleId();&#10;        if (roleId == null) {&#10;            throw new RuntimeException(&quot;Role is required&quot;);&#10;        }&#10;        Role role = roleRepository.findById(roleId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Role not found&quot;));&#10;        newUser.setRoles(new HashSet&lt;&gt;(Collections.singletonList(role)));&#10;&#10;        userRepository.save(newUser);&#10;    }&#10;&#10;&#10;&#10;    public UserDTO getUserById(int id) {&#10;        Optional&lt;User&gt; user = userRepository.findById((long) id);&#10;        if (user.isPresent()) {&#10;            User currentUser = user.get();&#10;            UserDTO userDTO = new UserDTO();&#10;            userDTO.setId(currentUser.getId().intValue());&#10;            userDTO.setUsername(currentUser.getName());&#10;            userDTO.setEmail(currentUser.getEmail());&#10;            userDTO.setPhone(currentUser.getPhone());&#10;            userDTO.setImageUrl(currentUser.getImageUrl());&#10;            userDTO.setDepartmentId(currentUser.getDepartment() != null ? currentUser.getDepartment().getId() : null);&#10;            // Fix: get first role id as String&#10;            String roleIdStr = null;&#10;            if (currentUser.getRoles() != null &amp;&amp; !currentUser.getRoles().isEmpty()) {&#10;                roleIdStr = String.valueOf(currentUser.getRoles().iterator().next().getId());&#10;            }&#10;            userDTO.setRoleId(roleIdStr);&#10;            return userDTO;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    //&#10;    public void updateUser(int id, EditUserDTO editUserDTO) {&#10;        Optional&lt;User&gt; user = userRepository.findById((long) id);&#10;        if (user.isPresent()) {&#10;            // Update user details&#10;            User currentUser = user.get();&#10;            currentUser.setName(editUserDTO.getUsername());&#10;            currentUser.setEmail(editUserDTO.getEmail());&#10;            currentUser.setPhone(editUserDTO.getPhone());&#10;&#10;            Long departmentId = editUserDTO.getDepartmentId();&#10;            if (departmentId != null) {&#10;                Department department = departmentRepository.findById(departmentId).orElse(null);&#10;                if (department != null) {&#10;                    currentUser.setDepartment(department);&#10;                }&#10;            }&#10;&#10;            MultipartFile file = editUserDTO.getImage();&#10;            if (!file.isEmpty()) {&#10;                // 1. xoa anh cu&#10;                fileManager.deleteFile(UPLOAD_DIR + &quot;/&quot; + currentUser.getImageUrl());&#10;                String fileName = fileManager.uploadFile(UPLOAD_DIR, file);&#10;                currentUser.setImageUrl(fileName); // Set the image URL&#10;            }&#10;&#10;            // Cập nhật Role (bắt buộc)&#10;            Long roleID = editUserDTO.getRoleId();&#10;            if (roleID != null) {&#10;                Role role = roleRepository.findById(roleID).orElse(null);&#10;                if (role != null) {&#10;                    Set&lt;Role&gt; roles = new HashSet&lt;&gt;();&#10;                    roles.add(role);&#10;                    currentUser.setRoles(roles); // Fix: setRoles instead of setRole&#10;                }&#10;            }&#10;            userRepository.save(currentUser);&#10;        }&#10;    }&#10;&#10;    public Page&lt;UserDTO&gt; searchUsers(String query, Pageable pageable) {&#10;        Page&lt;User&gt; users = userRepository&#10;                .findByNameContainingIgnoreCaseOrEmailContainingIgnoreCaseOrPhoneContainingIgnoreCase(&#10;                        query, query, query, pageable);&#10;&#10;        return users.map(user -&gt; {&#10;            UserDTO userDTO = new UserDTO();&#10;            userDTO.setId(user.getId().intValue());&#10;            userDTO.setUsername(user.getName());&#10;            userDTO.setEmail(user.getEmail());&#10;            userDTO.setPhone(user.getPhone());&#10;            userDTO.setImageUrl(user.getImageUrl());&#10;            String nameDepartment = user.getDepartment() != null ? user.getDepartment().getName() : &quot;No Department&quot;;&#10;            userDTO.setDepartmentName(nameDepartment);&#10;            String roleName = &quot;No Role&quot;;&#10;            if (user.getRoles() != null &amp;&amp; !user.getRoles().isEmpty()) {&#10;                roleName = user.getRoles().iterator().next().getName();&#10;            }&#10;            userDTO.setRoleName(roleName);&#10;            return userDTO;&#10;        });&#10;    }&#10;&#10;    public List&lt;UserDTO&gt; filterUsersByDepartment(Long departmentId, int page, int size) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;User&gt; users = userRepository.findByDepartmentId(departmentId, pageable);&#10;&#10;        return users.stream().map(user -&gt; {&#10;            UserDTO dto = new UserDTO();&#10;            dto.setId(user.getId().intValue());&#10;            dto.setUsername(user.getName());&#10;            dto.setEmail(user.getEmail());&#10;            dto.setPhone(user.getPhone());&#10;            dto.setImageUrl(user.getImageUrl());&#10;            dto.setDepartmentName(user.getDepartment() != null ? user.getDepartment().getName() : &quot;No Department&quot;);&#10;            dto.setRoleName(user.getRoles() != null &amp;&amp; !user.getRoles().isEmpty() ? user.getRoles().iterator().next().getName() : &quot;No Role&quot;);&#10;            return dto;&#10;        }).toList();&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/WEB-INF/resources/static/js/my.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/WEB-INF/resources/static/js/my.jsp" />
              <option name="originalContent" value="$(document).ready(function () {&#10;// ma nguon jquery&#10;&#10;$(&quot;.image-user&quot;).click(function () {&#10;const urlImage = $(this).attr(&quot;src&quot;)&#10;$(&quot;#image-show&quot;).attr(&quot;src&quot;, urlImage);&#10;$(&quot;#myModal&quot;).css(&quot;display&quot;, &quot;block&quot;);&#10;})&#10;&#10;$(&quot;.close-modal-image-show&quot;).click(function (){&#10;$(&quot;#myModal&quot;).css(&quot;display&quot;, &quot;none&quot;);&#10;})&#10;&#10;$(&quot;#input-search-user&quot;).keyup(function () {&#10;const value = $(this).val();&#10;$.ajax({&#10;url: &quot;/users/search&quot;,&#10;method: &quot;GET&quot;,&#10;data: {&#10;keyword: value&#10;},&#10;success: function( result) {&#10;console.log(result)&#10;showUserSearch(result.users)&#10;},&#10;error: function (err) {&#10;&#10;}&#10;});&#10;})&#10;&#10;const currentLang = getCookie(&quot;Locale&quot;);&#10;renderOptionLang(currentLang);&#10;const showUserSearch = (users) =&gt; {&#10;let html = &quot;&quot;;&#10;users.forEach((item, index) =&gt; {&#10;html += '&lt;tr&gt;';&#10;html += `&lt;td&gt;${index+1}&lt;/td&gt;`&#10;html += `&lt;td&gt;${item.username}&lt;/td&gt;`&#10;html += `&lt;td&gt;&lt;img width=&quot;150&quot; src=&quot;/resources/uploads/${item.imageUrl}&quot;&gt;&lt;/td&gt;`&#10;html += `&lt;td&gt;${item.email}&lt;/td&gt;`&#10;html += `&lt;td&gt;${item.phone}&lt;/td&gt;`&#10;html += `&lt;td&gt;${item.departmentName}&lt;/td&gt;`&#10;html += `&#10;&lt;td&gt;&#10;    &lt;a class=&quot;btn btn-danger&quot; onclick=&quot;return confirm('Are you sure')&quot; th:href=&quot;@{/users/{id}/delete(id=${item.id})}&quot;&gt;&#10;        &lt;i class=&quot;fa-solid fa-trash&quot;&gt;&lt;/i&gt;&#10;    &lt;/a&gt;&#10;    &lt;a class=&quot;btn btn-primary&quot; th:href=&quot;@{/users/{id}/edit(id=${item.id})}&quot;&gt;&#10;        &lt;i class=&quot;fa-solid fa-pen-to-square&quot;&gt;&lt;/i&gt;&#10;    &lt;/a&gt;&#10;&lt;/td&gt;`&#10;html += '&lt;tr&gt;';&#10;})&#10;&#10;$(&quot;#list-user&quot;).html(html)&#10;}&#10;// lay cookie LOCALE&#10;$(&quot;#select-lang&quot;).change(() =&gt; {&#10;$(&quot;#form-change-lang&quot;).submit();&#10;})&#10;&#10;})&#10;&#10;function renderOptionLang(currentLang) {&#10;let html = &quot;&quot;;&#10;html += `&lt;option ${currentLang === 'en' ? 'selected': '' }&quot; value=&quot;en&quot;&gt;EN&lt;/option&gt;&#10;&lt;option ${currentLang === 'vi' ? 'selected': '' } value=&quot;vi&quot;&gt;VN&lt;/option&gt;`;&#10;&#10;$(&quot;#select-lang&quot;).html(html)&#10;&#10;}&#10;&#10;function getCookie(name) {&#10;const nameEQ = name + &quot;=&quot;;&#10;const ca = document.cookie.split(';'); // Split all cookies into an array&#10;for (let i = 0; i &lt; ca.length; i++) {&#10;let c = ca[i];&#10;while (c.charAt(0) === ' ') { // Remove leading spaces&#10;c = c.substring(1, c.length);&#10;}&#10;if (c.indexOf(nameEQ) === 0) { // Check if the cookie starts with the desired name&#10;return decodeURIComponent(c.substring(nameEQ.length, c.length)); // Return the decoded value&#10;}&#10;}&#10;return null; // Return null if the cookie is not found&#10;}" />
              <option name="updatedContent" value="$(document).ready(function () {&#10;// ma nguon jquery&#10;&#10;$(&quot;.image-user&quot;).click(function () {&#10;const urlImage = $(this).attr(&quot;src&quot;)&#10;$(&quot;#image-show&quot;).attr(&quot;src&quot;, urlImage);&#10;$(&quot;#myModal&quot;).css(&quot;display&quot;, &quot;block&quot;);&#10;})&#10;&#10;$(&quot;.close-modal-image-show&quot;).click(function (){&#10;$(&quot;#myModal&quot;).css(&quot;display&quot;, &quot;none&quot;);&#10;})&#10;&#10;const currentLang = getCookie(&quot;Locale&quot;);&#10;renderOptionLang(currentLang);&#10;const showUserSearch = (users) =&gt; {&#10;let html = &quot;&quot;;&#10;users.forEach((item, index) =&gt; {&#10;html += '&lt;tr&gt;';&#10;html += `&lt;td&gt;${index+1}&lt;/td&gt;`&#10;html += `&lt;td&gt;${item.username}&lt;/td&gt;`&#10;html += `&lt;td&gt;&lt;img width=&quot;150&quot; src=&quot;/resources/uploads/${item.imageUrl}&quot;&gt;&lt;/td&gt;`&#10;html += `&lt;td&gt;${item.email}&lt;/td&gt;`&#10;html += `&lt;td&gt;${item.phone}&lt;/td&gt;`&#10;html += `&lt;td&gt;${item.departmentName}&lt;/td&gt;`&#10;html += `&#10;&lt;td&gt;&#10;    &lt;a class=&quot;btn btn-danger&quot; onclick=&quot;return confirm('Are you sure')&quot; href=&quot;/users/${item.id}/delete&quot;&gt;&#10;        &lt;i class=&quot;fa-solid fa-trash&quot;&gt;&lt;/i&gt;&#10;    &lt;/a&gt;&#10;    &lt;a class=&quot;btn btn-primary&quot; href=&quot;/users/${item.id}/edit&quot;&gt;&#10;        &lt;i class=&quot;fa-solid fa-pen-to-square&quot;&gt;&lt;/i&gt;&#10;    &lt;/a&gt;&#10;&lt;/td&gt;`&#10;html += '&lt;/tr&gt;';&#10;})&#10;&#10;$(&quot;#list-user&quot;).html(html)&#10;}&#10;&#10;$(&quot;#input-search-user&quot;).keyup(function () {&#10;const value = $(this).val();&#10;$.ajax({&#10;url: &quot;/users/search&quot;,&#10;method: &quot;GET&quot;,&#10;data: {&#10;keyword: value&#10;},&#10;success: function( result) {&#10;console.log(result)&#10;showUserSearch(result.users)&#10;},&#10;error: function (err) {&#10;&#10;}&#10;});&#10;})&#10;&#10;// lay cookie LOCALE&#10;$(&quot;#select-lang&quot;).change(() =&gt; {&#10;$(&quot;#form-change-lang&quot;).submit();&#10;})&#10;&#10;})&#10;&#10;function renderOptionLang(currentLang) {&#10;let html = &quot;&quot;;&#10;html += `&lt;option ${currentLang === 'en' ? 'selected': '' }&quot; value=&quot;en&quot;&gt;EN&lt;/option&gt;&#10;&lt;option ${currentLang === 'vi' ? 'selected': '' } value=&quot;vi&quot;&gt;VN&lt;/option&gt;`;&#10;&#10;$(&quot;#select-lang&quot;).html(html)&#10;&#10;}&#10;&#10;function getCookie(name) {&#10;const nameEQ = name + &quot;=&quot;;&#10;const ca = document.cookie.split(';'); // Split all cookies into an array&#10;for (let i = 0; i &lt; ca.length; i++) {&#10;let c = ca[i];&#10;while (c.charAt(0) === ' ') { // Remove leading spaces&#10;c = c.substring(1, c.length);&#10;}&#10;if (c.indexOf(nameEQ) === 0) { // Check if the cookie starts with the desired name&#10;return decodeURIComponent(c.substring(nameEQ.length, c.length)); // Return the decoded value&#10;}&#10;}&#10;return null; // Return null if the cookie is not found&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/WEB-INF/views/users/list.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/WEB-INF/views/users/list.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&#10;      xmlns:layout=&quot;http://www.ultraq.net.nz/thymeleaf/layout&quot;&#10;      layout:decorate=&quot;~{layout}&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;User Management&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            background-color: #f8f9fa;&#10;        }&#10;        .user-img {&#10;            width: 80px;&#10;            height: 80px;&#10;            object-fit: cover;&#10;            border-radius: 8px;&#10;            border: 1px solid #ddd;&#10;        }&#10;        .table th {&#10;            background-color: #0d6efd;&#10;            color: white;&#10;            text-align: center;&#10;        }&#10;        .table td {&#10;            vertical-align: middle;&#10;        }&#10;        .pagination .page-link {&#10;            color: #0d6efd;&#10;        }&#10;        .pagination .page-item.active .page-link {&#10;            background-color: #0d6efd;&#10;            border-color: #0d6efd;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;section layout:fragment=&quot;content&quot;&gt;&#10;    &lt;div class=&quot;d-flex justify-content-between align-items-center mb-4&quot;&gt;&#10;        &lt;h2 class=&quot;fw-bold text-primary&quot;&gt;&lt;i class=&quot;fa fa-users&quot;&gt;&lt;/i&gt; User Management&lt;/h2&gt;&#10;        &lt;a class=&quot;btn btn-success&quot; href=&quot;/admin/users/create&quot;&gt;&#10;            &lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; Create User&#10;        &lt;/a&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Bộ lọc &amp; tìm kiếm --&gt;&#10;    &lt;div class=&quot;card shadow-sm mb-4&quot;&gt;&#10;        &lt;div class=&quot;card-body d-flex flex-wrap gap-2 align-items-center justify-content-between&quot;&gt;&#10;            &lt;!-- Filter department --&gt;&#10;            &lt;form method=&quot;get&quot; action=&quot;/users&quot; class=&quot;filter-form&quot;&gt;&#10;                &lt;select class=&quot;form-select&quot; name=&quot;departmentId&quot; onchange=&quot;this.form.submit()&quot;&gt;&#10;                    &lt;option value=&quot;&quot;&gt;-- Chọn phòng ban --&lt;/option&gt;&#10;                    &lt;option th:each=&quot;dept : ${departments}&quot;&#10;                            th:value=&quot;${dept.id}&quot;&#10;                            th:text=&quot;${dept.name}&quot;&#10;                            th:selected=&quot;${dept.id} == ${selectedDepartmentId}&quot;&gt;&#10;                    &lt;/option&gt;&#10;                &lt;/select&gt;&#10;            &lt;/form&gt;&#10;&#10;            &lt;!-- Search --&gt;&#10;            &lt;form class=&quot;d-flex&quot; th:action=&quot;@{/users/search}&quot; method=&quot;get&quot;&gt;&#10;                &lt;input class=&quot;form-control me-2&quot; type=&quot;text&quot; name=&quot;query&quot; placeholder=&quot;Search user...&quot;&gt;&#10;                &lt;button class=&quot;btn btn-outline-primary&quot; type=&quot;submit&quot;&gt;&#10;                    &lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;card shadow-lg&quot;&gt;&#10;            &lt;div class=&quot;card-body&quot;&gt;&#10;                &lt;table class=&quot;table table-hover table-bordered align-middle text-center&quot;&gt;&#10;                    &lt;thead class=&quot;table-dark&quot;&gt;&#10;                    &lt;tr&gt;&#10;                        &lt;th&gt;STT&lt;/th&gt;&#10;                        &lt;th&gt;Name&lt;/th&gt;&#10;                        &lt;th&gt;Image&lt;/th&gt;&#10;                        &lt;th&gt;Email&lt;/th&gt;&#10;                        &lt;th&gt;Phone&lt;/th&gt;&#10;                        &lt;th&gt;Department&lt;/th&gt;&#10;                        &lt;th&gt;Role&lt;/th&gt; &lt;!-- thêm cột --&gt;&#10;                        &lt;th&gt;Actions&lt;/th&gt;&#10;                    &lt;/tr&gt;&#10;                    &lt;/thead&gt;&#10;                    &lt;tbody&gt;&#10;                    &lt;tr th:each=&quot;user, userStat : ${users}&quot;&gt;&#10;                        &lt;td th:text=&quot;${userStat.index + 1}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td th:text=&quot;${user.getUsername()}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td&gt;&#10;                            &lt;img class=&quot;user-img&quot; th:src=&quot;@{/resources/uploads/{url}(url=${user.getImageUrl()})}&quot; alt=&quot;User image&quot;&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td th:text=&quot;${user.getEmail()}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td th:text=&quot;${user.getPhone()}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td th:text=&quot;${user.getDepartmentName()}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td th:text=&quot;${user.getRoleName()}&quot;&gt;&lt;/td&gt; &lt;!-- hiển thị tên role --&gt;&#10;                        &lt;td&gt;&#10;                            &lt;a class=&quot;btn btn-sm btn-info&quot; th:href=&quot;@{/admin/users/{id}/detail(id=${user.getId()})}&quot;&gt;&#10;                                &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;&#10;                            &lt;/a&gt;&#10;                            &lt;a class=&quot;btn btn-sm btn-primary&quot; th:href=&quot;@{/admin/users/{id}/edit(id=${user.getId()})}&quot;&gt;&#10;                                &lt;i class=&quot;fa fa-edit&quot;&gt;&lt;/i&gt;&#10;                            &lt;/a&gt;&#10;                            &lt;a class=&quot;btn btn-sm btn-danger&quot;&#10;                               onclick=&quot;return confirm('Are you sure?')&quot;&#10;                               th:href=&quot;@{/admin/users/{id}/delete(id=${user.getId()})}&quot;&gt;&#10;                                &lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt;&#10;                            &lt;/a&gt;&#10;                        &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                    &lt;/tbody&gt;&#10;                &lt;/table&gt;&#10;&#10;                &lt;!-- Pagination --&gt;&#10;                &lt;nav class=&quot;mt-4&quot;&gt;&#10;                    &lt;ul class=&quot;pagination justify-content-center&quot;&gt;&#10;                        &lt;li class=&quot;page-item&quot;&gt;&#10;                            &lt;a class=&quot;page-link&quot; href=&quot;#&quot;&gt;Previous&lt;/a&gt;&#10;                        &lt;/li&gt;&#10;                        &lt;li class=&quot;page-item&quot;&#10;                            th:each=&quot;i : ${#numbers.sequence(1, totalPages)}&quot;&#10;                            th:classappend=&quot;${i == currentPage} ? 'active'&quot;&gt;&#10;                            &lt;a class=&quot;page-link&quot;&#10;                               th:href=&quot;@{/users(page=${i},size=5)}&quot;&#10;                               th:text=&quot;${i}&quot;&gt;&lt;/a&gt;&#10;                        &lt;/li&gt;&#10;                        &lt;li class=&quot;page-item&quot;&gt;&#10;                            &lt;a class=&quot;page-link&quot; href=&quot;#&quot;&gt;Next&lt;/a&gt;&#10;                        &lt;/li&gt;&#10;                    &lt;/ul&gt;&#10;                &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/section&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&#10;      xmlns:layout=&quot;http://www.ultraq.net.nz/thymeleaf/layout&quot;&#10;      layout:decorate=&quot;~{layout}&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;User Management&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            background-color: #f8f9fa;&#10;        }&#10;        .user-img {&#10;            width: 80px;&#10;            height: 80px;&#10;            object-fit: cover;&#10;            border-radius: 8px;&#10;            border: 1px solid #ddd;&#10;        }&#10;        .table th {&#10;            background-color: #0d6efd;&#10;            color: white;&#10;            text-align: center;&#10;        }&#10;        .table td {&#10;            vertical-align: middle;&#10;        }&#10;        .pagination .page-link {&#10;            color: #0d6efd;&#10;        }&#10;        .pagination .page-item.active .page-link {&#10;            background-color: #0d6efd;&#10;            border-color: #0d6efd;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;section layout:fragment=&quot;content&quot;&gt;&#10;    &lt;div class=&quot;d-flex justify-content-between align-items-center mb-4&quot;&gt;&#10;        &lt;h2 class=&quot;fw-bold text-primary&quot;&gt;&lt;i class=&quot;fa fa-users&quot;&gt;&lt;/i&gt; User Management&lt;/h2&gt;&#10;        &lt;a class=&quot;btn btn-success&quot; href=&quot;/admin/users/create&quot;&gt;&#10;            &lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; Create User&#10;        &lt;/a&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Bộ lọc &amp; tìm kiếm --&gt;&#10;    &lt;div class=&quot;card shadow-sm mb-4&quot;&gt;&#10;        &lt;div class=&quot;card-body d-flex flex-wrap gap-2 align-items-center justify-content-between&quot;&gt;&#10;            &lt;!-- Filter department --&gt;&#10;            &lt;form method=&quot;get&quot; action=&quot;/admin/users&quot; class=&quot;filter-form&quot;&gt;&#10;                &lt;select class=&quot;form-select&quot; name=&quot;departmentId&quot; onchange=&quot;this.form.submit()&quot;&gt;&#10;                    &lt;option value=&quot;&quot;&gt;-- Chọn phòng ban --&lt;/option&gt;&#10;                    &lt;option th:each=&quot;dept : ${departments}&quot;&#10;                            th:value=&quot;${dept.id}&quot;&#10;                            th:text=&quot;${dept.name}&quot;&#10;                            th:selected=&quot;${dept.id} == ${selectedDepartmentId}&quot;&gt;&#10;                    &lt;/option&gt;&#10;                &lt;/select&gt;&#10;            &lt;/form&gt;&#10;&#10;            &lt;!-- Search --&gt;&#10;            &lt;form class=&quot;d-flex&quot; th:action=&quot;@{/admin/users/search}&quot; method=&quot;get&quot;&gt;&#10;                &lt;input class=&quot;form-control me-2&quot; type=&quot;text&quot; name=&quot;query&quot; placeholder=&quot;Search user...&quot;&gt;&#10;                &lt;button class=&quot;btn btn-outline-primary&quot; type=&quot;submit&quot;&gt;&#10;                    &lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt;&#10;                &lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;card shadow-lg&quot;&gt;&#10;            &lt;div class=&quot;card-body&quot;&gt;&#10;                &lt;table class=&quot;table table-hover table-bordered align-middle text-center&quot;&gt;&#10;                    &lt;thead class=&quot;table-dark&quot;&gt;&#10;                    &lt;tr&gt;&#10;                        &lt;th&gt;STT&lt;/th&gt;&#10;                        &lt;th&gt;Name&lt;/th&gt;&#10;                        &lt;th&gt;Image&lt;/th&gt;&#10;                        &lt;th&gt;Email&lt;/th&gt;&#10;                        &lt;th&gt;Phone&lt;/th&gt;&#10;                        &lt;th&gt;Department&lt;/th&gt;&#10;                        &lt;th&gt;Role&lt;/th&gt;&#10;                        &lt;th&gt;Actions&lt;/th&gt;&#10;                    &lt;/tr&gt;&#10;                    &lt;/thead&gt;&#10;                    &lt;tbody&gt;&#10;                    &lt;tr th:each=&quot;user, userStat : ${users}&quot;&gt;&#10;                        &lt;td th:text=&quot;${userStat.index + 1}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td th:text=&quot;${user.getUsername()}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td&gt;&#10;                            &lt;img class=&quot;user-img&quot; th:src=&quot;@{/resources/uploads/{url}(url=${user.getImageUrl()})}&quot; alt=&quot;User image&quot;&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td th:text=&quot;${user.getEmail()}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td th:text=&quot;${user.getPhone()}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td th:text=&quot;${user.getDepartmentName()}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td th:text=&quot;${user.getRoleName()}&quot;&gt;&lt;/td&gt;&#10;                        &lt;td&gt;&#10;                            &lt;a class=&quot;btn btn-sm btn-info&quot; th:href=&quot;@{/admin/users/{id}/detail(id=${user.getId()})}&quot;&gt;&#10;                                &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;&#10;                            &lt;/a&gt;&#10;                            &lt;a class=&quot;btn btn-sm btn-primary&quot; th:href=&quot;@{/admin/users/{id}/edit(id=${user.getId()})}&quot;&gt;&#10;                                &lt;i class=&quot;fa fa-edit&quot;&gt;&lt;/i&gt;&#10;                            &lt;/a&gt;&#10;                            &lt;a class=&quot;btn btn-sm btn-danger&quot;&#10;                               onclick=&quot;return confirm('Are you sure?')&quot;&#10;                               th:href=&quot;@{/admin/users/{id}/delete(id=${user.getId()})}&quot;&gt;&#10;                                &lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt;&#10;                            &lt;/a&gt;&#10;                        &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                    &lt;/tbody&gt;&#10;                &lt;/table&gt;&#10;&#10;                &lt;!-- Pagination --&gt;&#10;                &lt;nav class=&quot;mt-4&quot;&gt;&#10;                    &lt;ul class=&quot;pagination justify-content-center&quot;&gt;&#10;                        &lt;li class=&quot;page-item&quot;&gt;&#10;                            &lt;a class=&quot;page-link&quot; href=&quot;#&quot;&gt;Previous&lt;/a&gt;&#10;                        &lt;/li&gt;&#10;                        &lt;li class=&quot;page-item&quot;&#10;                            th:each=&quot;i : ${#numbers.sequence(1, totalPages)}&quot;&#10;                            th:classappend=&quot;${i == currentPage} ? 'active'&quot;&gt;&#10;                            &lt;a class=&quot;page-link&quot;&#10;                               th:href=&quot;@{/admin/users(page=${i},size=5)}&quot;&#10;                               th:text=&quot;${i}&quot;&gt;&lt;/a&gt;&#10;                        &lt;/li&gt;&#10;                        &lt;li class=&quot;page-item&quot;&gt;&#10;                            &lt;a class=&quot;page-link&quot; href=&quot;#&quot;&gt;Next&lt;/a&gt;&#10;                        &lt;/li&gt;&#10;                    &lt;/ul&gt;&#10;                &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/section&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>